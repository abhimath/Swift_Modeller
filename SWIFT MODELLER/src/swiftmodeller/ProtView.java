/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProtView.java
 *
 * Created on 2 Feb, 2011, 12:18:39 AM
 */

package swiftmodeller;

import org.biojava.bio.structure.Structure;
import org.biojava.bio.structure.io.PDBFileReader;
import org.jmol.adapter.smarter.SmarterJmolAdapter;
import org.jmol.api.JmolAdapter;
import org.jmol.api.JmolSimpleViewer;
import java.io.*;
import javax.swing.*;
import java.awt.*;
/**
 *
 * @author WOLV3RINE
 */
public class ProtView extends javax.swing.JFrame {

    /** Creates new form ProtView */
    public ProtView()
    {
        Container contentPane = this.getContentPane();
        jmolPanel = new JmolPanel();

        try
        {
            PDBFileReader pdbr = new PDBFileReader();
            File file = new File(workpath + sep + cmod);
            Structure struc = pdbr.getStructure(file);
            setStructure(struc);
        }
        catch (IOException e)
        {
            new ErrorClose(this, true, "I/O Error");
        }

        jmolPanel.setPreferredSize(new Dimension(500,500));
        contentPane.add(jmolPanel);

        this.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent e)
            {
                pulltheplug();
            }
        });

        this.setTitle(cmod);
        this.pack();
        this.setVisible(true);
    }

    public void setStructure(Structure s)
    {
        this.setTitle(s.getName());
        String pdb = s.toPDB();
        structure = s;
        viewer = jmolPanel.getViewer();

        viewer.openStringInline(pdb);
        viewer.evalString("select *; spacefill off; wireframe off; cartoon 250;  ");
        viewer.evalString("color amino;  ");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 500, 500));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 503, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void pulltheplug()
    {
        new RamaForm().setVisible(true);
        this.setVisible(false);
    }

    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProtView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private static String workpath = SwiftModellerView.workpath;
    private static String sep = SwiftModellerView.sep;
    private static String cmod = RamaForm.cmod;
    JmolPanel jmolPanel;
    Structure structure;
    JmolSimpleViewer viewer;
}

class JmolPanel extends JPanel
{
    private static final long serialVersionUID = -3661941083797644242L;
    JmolSimpleViewer viewer;
    JmolAdapter adapter;
    JmolPanel()
    {
        adapter = new SmarterJmolAdapter();
        viewer = JmolSimpleViewer.allocateSimpleViewer(this, adapter);
    }

    public JmolSimpleViewer getViewer()
    {
        return viewer;
    }

    public void executeCmd(String rasmolScript)
    {
        viewer.evalString(rasmolScript);
    }

    final Dimension currentSize = new Dimension();
    final Rectangle rectClip = new Rectangle();

    public void paint(Graphics g)
    {
        getSize(currentSize);
        g.getClipBounds(rectClip);
        viewer.renderScreenImage(g, currentSize, rectClip);
    }
}