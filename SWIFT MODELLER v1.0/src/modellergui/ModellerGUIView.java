/*
 * ModellerGUIView.java
 */

package modellergui;

import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class ModellerGUIView extends FrameView {

    public ModellerGUIView(SingleFrameApplication app) {
        super(app);
        DateFormat df = new SimpleDateFormat("EEE, d MMM yyyy HH.mm.ss");
        Date today = Calendar.getInstance().getTime();
        reportdate = df.format(today);
        workpath = new String(userdir + sep + reportdate);
        File dir = new File(workpath);
        dir.mkdir();
        
        StringBuffer path = new StringBuffer(userdir);
        path.delete(path.indexOf(sep), path.length());
        path.append(sep + "executescript.bat");
        File firstlogin = new File(path.toString());
        if(!firstlogin.exists())
        {
            new FirstLogin(this.getFrame(), true).setVisible(true);
        }

        versionCheck(firstlogin);
        copyResource();
        initComponents();
        jButton1.setVisible(false);
        jTextField2.setVisible(false);
        jCheckBox1.setVisible(false);
        jLabel4.setVisible(false);
        jTextField2.setVisible(false);
        
        try
        {
            File templates = new File(workpath + sep + "Template List.txt");
            BufferedWriter writer = new BufferedWriter(new FileWriter(templates));
            writer.close();
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
    }

    /**
	 * 
	 * @return 
	 */
	 /**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 * @return 
	 */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(modellergui.ModellerGUIApp.class).getContext().getResourceMap(ModellerGUIView.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(resourceMap.getFont("jRadioButton1.font")); // NOI18N
        jRadioButton1.setSelected(true);
        jRadioButton1.setText(resourceMap.getString("jRadioButton1.text")); // NOI18N
        jRadioButton1.setName("jRadioButton1"); // NOI18N
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(resourceMap.getFont("jRadioButton2.font")); // NOI18N
        jRadioButton2.setText(resourceMap.getString("jRadioButton2.text")); // NOI18N
        jRadioButton2.setName("jRadioButton2"); // NOI18N
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setName("jTextField2"); // NOI18N

        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setVisible(false);
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(modellergui.ModellerGUIApp.class).getContext().getActionMap(ModellerGUIView.class, this);
        jButton2.setAction(actionMap.get("ProfileSearch")); // NOI18N
        jButton2.setFont(resourceMap.getFont("jButton2.font")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setToolTipText(resourceMap.getString("jLabel3.toolTipText")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jCheckBox1.setFont(resourceMap.getFont("jCheckBox1.font")); // NOI18N
        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jTextField2))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(346, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(327, 327, 327))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(2, 2, 2)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
        char abc = evt.getKeyChar();
        chkva = jTextArea1.getText().length();
        if((chkva > 0) && (chkvf > 0))
        {
            jButton2.setVisible(true);
        }
        else
        {
            jButton2.setVisible(false);
        }
        if(!(Character.isLetter(abc)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextArea1KeyTyped

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        new SelectChain(this.getFrame(), true).setVisible(true);
        jButton2.setVisible(true);
        jTextField2.setText(SelectChain.template.toString());

    }//GEN-LAST:event_jLabel4MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        
        formSequence();
        if(jRadioButton1.isSelected())
        {
            searchDatabase();
            new FlushScript(this.getFrame());
            new ProfileSearch().setVisible(true);            
        }
        
        else if (jRadioButton2.isSelected())
        {
            File file = new File(workpath + sep + "Template List.txt");
            BufferedReader reader = null;
            StringBuffer contents = new StringBuffer();
            int i=0;

            try
            {
                reader = new BufferedReader(new FileReader(file));

                String text = null;
                while ((text = reader.readLine()) != null)
                {
                    contents.append(text).append("\n");
                    i++;
                }
            }
            catch (FileNotFoundException e)
            {
                new ErrorClose(this.getFrame(), true, "File Not Found : " + file.getName());
            }
            catch (IOException e)
            {
                new ErrorClose(this.getFrame(), true, "I/O Error");
            }
            finally
            {
                try
                {
                    if (reader != null)
                    {
                        reader.close();
                    }
                } catch (IOException e)
                {
                    new ErrorClose(this.getFrame(), true, "I/O Error");
                }
            }
            
            if((jCheckBox1.isSelected() == false) && (i == 1))
            {
                new SUploadAlign(contents, title, this.getComponent());
                new FlushScript(this.getFrame());
                suaopfile = SUploadAlign.opfile + ".pap";
                notalign = 1;
                new Alignment().setVisible(true);
            }
            else if((jCheckBox1.isSelected() == false) && (i > 1))
            {
                new MUploadCompare(contents, this.getComponent());
                new FlushScript(this.getFrame());
                new Compare().setVisible(true);
            }
            else if (jCheckBox1.isSelected() == true)
            {
                new MUploadAlign(contents, title, this.getComponent());
                new FlushScript(this.getFrame());
                muaopfile = MUploadAlign.muaopfile + ".pap";
                notalign = 2;
                new Alignment().setVisible(true);
            }
        }
        
        ModellerGUIApp.getApplication().getMainFrame().setVisible(false);
    }

    private void versionCheck(File verchk)
    {
        BufferedReader reader = null;
        StringBuffer sb1 = new StringBuffer();
        version = new String();
        
        try
        {
            reader = new BufferedReader(new FileReader(verchk));

            String text = null;
            while ((text = reader.readLine()) != null)
            {
                sb1.append(text);
            }

            version = sb1.substring((sb1.indexOf("Modeller") + 8), (sb1.indexOf(sep + "bin")));
        }
        catch (FileNotFoundException e)
        {
            new ErrorClose(this.getFrame(), true, "File Not Found : " + verchk.getName());
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
        finally
        {
            try
            {
                if (reader != null)
                {
                    reader.close();
                }
            } catch (IOException e)
            {
                new ErrorClose(this.getFrame(), true, "I/O Error");
            }
        }
    }

    private void copyResource()
    {
        StringBuffer path = new StringBuffer(userdir);
        path.delete(path.indexOf(sep), path.length());
        path.append(sep + "copyresource.bat");

        File file = new File(path.toString());
        StringBuffer contents = new StringBuffer();
        BufferedWriter writer = null;

        try
        {
            contents.append("copy \"" + userdir + sep + "resource" + sep + "*.*\" \"" + workpath + "\"").append("\nexit");
            writer = new BufferedWriter(new FileWriter(file));
            writer.write(contents.toString());
            writer.close();

            StringBuffer command = new StringBuffer("cmd /C start ");
            command.append(path);

            Runtime rt = Runtime.getRuntime();
            Process pr = rt.exec(command.toString());
        }
        catch (FileNotFoundException e)
        {
            new ErrorClose(this.getFrame(), true, "File Not Found : " + file.getName());
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
    }

    private void formSequence()
    {   title = jTextField1.getText().toUpperCase();
        seqname = title + ".ali";
        String seqpath =  workpath + sep + seqname;
        String seqcontents = ">P1;" + title + "\nsequence:" + title + ":::::::0.00: 0.00\n" + jTextArea1.getText().toUpperCase() + "*";

        File seq = new File(seqpath);
        BufferedWriter writer = null;

        try
        {
            writer = new BufferedWriter(new FileWriter(seq));
            writer.write(seqcontents);
            writer.close();
        }
        catch (FileNotFoundException e)
        {
            new ErrorClose(this.getFrame(), true, "File Not Found : " + seq.getName());
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
    }

    private void searchDatabase()
    {
        File file = new File(workpath + sep + "build_profile.py");
        File outputfile = new File(workpath + sep + "build_profile.log");
        StringBuffer contents = new StringBuffer();
        StringBuffer exectext = new StringBuffer();
        BufferedReader reader = null;
        BufferedWriter writer = null;

        try
        {
            reader = new BufferedReader(new FileReader(file));
            String text = null;
            
            while ((text = reader.readLine()) != null)
            {
                contents.append(text).append("\n");
            }

            contents.replace((contents.indexOf("aln.append(file=") + 16),contents.indexOf(", alignment_format='PIR'"), ("'" + title + ".ali'"));

            writer = new BufferedWriter(new FileWriter(file));
            writer.write(contents.toString());
            writer.close();
        }
        catch (FileNotFoundException e)
        {
            new ErrorClose(this.getFrame(), true, "File Not Found : " + file.getName());
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
        finally
        {
           try
            {
                if (reader != null)
                {
                    reader.close();
                }
            } catch (IOException e)
            {
                new ErrorClose(this.getFrame(), true, "I/O Error");
            }
        }
        
        exectext.append("mod" + version + " build_profile.py\n");
        exectext.append("exit");
        new ExecuteScript(exectext, outputfile, this.getComponent());
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {

        cf = new ChooseFile();
        if(cf.file != null)
        {
            Filecopy(cf);
            int count =0;
            StringBuffer templist = new StringBuffer();
            StringBuffer str = new StringBuffer();
            StringBuffer displist = new StringBuffer();
            File templates = new File(workpath + sep + "Template List.txt");
            BufferedReader reader = null;
            BufferedWriter writer = null;

            for(int i = 0; i < cf.file.length; i++)
            {
                String chain = extractchainid(cf.file[i]);
                str.append(cf.file[i].getName()).append(":").append(chain).append("\n");
                displist.append(cf.file[i].getName()).append(", ");
                count++;
            }

            try
            {
                reader = new BufferedReader(new FileReader(templates));
                String text = null;

                while ((text = reader.readLine()) != null)
                {
                    templist.append(text).append("\n");
                    displist.append(text.substring(0, 8)).append(", ");
                    count++;
                }
                templist.append(str);

                writer = new BufferedWriter(new FileWriter(templates));
                writer.write(templist.toString());
                writer.close();
            }
            catch (FileNotFoundException e)
            {
                new ErrorClose(this.getFrame(), true, "File Not Found : " + templates.getName());
            }
            catch (IOException e)
            {
                new ErrorClose(this.getFrame(), true, "I/O Error");
            }
            finally
            {
                try
                {
                    if (reader != null)
                    {
                        reader.close();
                    }
                }
                catch (IOException e)
                {
                    new ErrorClose(this.getFrame(), true, "I/O Error");
                }
            }

            displist.substring(0,(displist.length()-2));
            jTextField2.setText(displist.toString());
            jLabel4.setVisible(true);
            if(count>1)
            {
                jCheckBox1.setVisible(true);
            }
        }
    }

    private void Filecopy(ChooseFile file1)
    {
        StringBuffer path = new StringBuffer(userdir);
        path.delete(path.indexOf(sep), path.length());
        path.append(sep + "copytemplates.bat");
        
        File file = new File(path.toString());
        StringBuffer contents = new StringBuffer();
        BufferedWriter writer = null;

        try
        {
            for(int i=0; i<file1.file.length; i++)
                contents.append("copy \"" + file1.file[i].getPath() + "\" \"" + workpath + sep + file1.file[i].getName() + "\"\n");

            contents.append("exit");
            writer = new BufferedWriter(new FileWriter(file));
            writer.write(contents.toString());
            writer.close();

            StringBuffer command = new StringBuffer("cmd /C start ");
            command.append(path);
            Runtime rt = Runtime.getRuntime();
            Process pr = rt.exec(command.toString());
        }
        catch (FileNotFoundException e)
        {
            new ErrorClose(this.getFrame(), true, "File Not Found : " + file.getName());
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
    }

    private String extractchainid(File file)
    {
        StringBuffer contents= new StringBuffer();
        BufferedReader reader = null;

        try
        {
            reader = new BufferedReader(new FileReader(file));
            String text = null;

            while ((text = reader.readLine()) != null)
            {
                contents.append(text).append("\n");
            }
        }
        catch (FileNotFoundException e)
        {
            new ErrorClose(this.getFrame(), true, "File Not Found : " + file.getName());
        }
        catch (IOException e)
        {
            new ErrorClose(this.getFrame(), true, "I/O Error");
        }
        finally
        {
           try
            {
                if (reader != null)
                {
                    reader.close();
                }
            } catch (IOException e)
            {
                new ErrorClose(this.getFrame(), true, "I/O Error");
            }
        }

        return contents.toString().substring((contents.indexOf("CHAIN: ") + 7), contents.indexOf("\nCOMPND   4")).trim();
    }

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        jButton2.setVisible(false);
        jButton1.setVisible(true);
        jTextField2.setVisible(true);
    }

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox1.setVisible(false);
        jButton1.setVisible(false);
        jTextField2.setVisible(false);
        jLabel4.setVisible(false);
    }

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {
        char abc = evt.getKeyChar();
        chkvf = jTextField1.getText().length();
        if((chkva > 0) && (chkvf > 0))
        {
            jButton2.setVisible(true);
        }
        else
        {
            jButton2.setVisible(false);
        }
        if(!(Character.isLetterOrDigit(abc)))
        {
            evt.consume();
        }
        if(jTextField1.getText().length() >= 5)
        {
            jTextField1.setEditable(false);
            if(abc == 8)
            {
                jTextField1.setEditable(true);
            }
        }    
    }

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {
       jTextArea1.setText("");
    }

    /**
	 * 
	 * @return 
	 */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
    public String reportdate;
    public static String userdir = System.getProperty("user.dir");
    public static String sep = System.getProperty("file.separator");
    public static String title, version;
    public static String suaopfile = new String();
    public static String muaopfile = new String();
    public static String workpath;
    public static int notalign = 0;
    private String seqname;
    private ChooseFile cf;
    private int chkvf;
    private int chkva;
}